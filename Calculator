// To Implement a Calculator using LEX and YACC.

%{ /* Definition section */ #include<stdio.h> #include "y.tab.h" extern int yylval;
%} /* Rule Section */ %% [0-9]+ { yylval=atoi(yytext);
return NUMBER;
} [\t] ;
[\n] return 0;
. return yytext[0];
%% int yywrap() { return 1;
} %{ /* Definition section */ #include<stdio.h> int flag=0;
%} %{ int yylex();
void yyerror();
%} %token NUMBER %left ’+’ ’-’ %left ’*’ ’/’ ’%’ %left ’(’ ’)’ /* Rule Section */ %% ArithmeticExpression: E { printf("\nResult=%d\n", $$);
return 0;
};
E:E’+’E {$$=$1+$3;} |E’-’E {$$=$1-$3;} |E’*’E {$$=$1*$3;} |E’/’E {$$=$1/$3;} |E’%’E {$$=$1%$3;} |’(’E’)’ {$$=$2;} | NUMBER {$$=$1;} ;
%% //driver code void main() { printf("\nEnter Any Arithmetic Expression which can have operations Addition,Subtraction, Multiplication,Divison, Modulus and Round brackets:\n");
yyparse();
if(flag==0) printf("\nEntered arithmetic expression is Valid\n\n");
} void yyerror() { printf("\nEntered arithmetic expression is Invalid\n\n"); flag=1;
} //output dhanu@dhanu:~$ lex cal.l dhanu@dhanu:~$ yacc -d cal.y dhanu@dhanu:~$ cc lex.yy.c y.tab.c -ll -ly dhanu@dhanu:~$ ./a.out Enter any arithmetic expression which can have operation like Addition, Substraction, Multiplication, Division,Modulus and Round brackets:
4+2-2/3%2 result:4 Entered arithmetic expression is valid.
