// Implementation of Code Generator.

%{ #include"stdio.h" #include"y.tab.h" %} %% [a-z][a-zA-Z0-9]* | [0-9]+ { } [ |\t] ;
strcpy(yylval.vname,yytext);
return NAME;
.|\n { return yytext[0];
} %% %{ #include"stdio.h" #include"string.h" #include"stdlib.h" int yylex();
void yyerror();
void fcloseall();
FILE *fpOut;
%} %union { char vname[10]; int val; } %left ’+’ ’-’ %left ’*’ ’/’ %token <vname> NAME %type <vname> expression %% input : line ’\n’ input | ’\n’ input | ;
line : NAME ’=’ expression { printf("MOV %s, AX\n",$1); } ;
expression: NAME ’+’ NAME { printf("MOV AX, %s\n",$1);
printf("ADD AX, %s\n",$3);
} | NAME ’-’ NAME { printf("MOV AX, %s\n",$1);
printf("SUB AX, %s\n",$3);
} | NAME ’*’ NAME { } printf("MOV AX, %s\n",$1);
printf("MUL AX, %s\n",$3);
| NAME ’/’ NAME { printf("MOV AX, %s\n",$1);
printf("DIV AX, %s\n",$3);
} | NAME { printf("MOV AX, %s\n",$1);
strcpy($$, $1);
} ;
%% FILE *yyin;
int main() { FILE *fpInput;
fpInput = fopen("input.txt","r");
if(fpInput==’\0’) { printf("file read error");
exit(0);
} /* fpOut = fopen("output.txt","w");
//printf("%s",msg);
if(fpOut==’\0’) { printf("file creation error");
exit(0);
}*/ yyin = fpInput;
yyparse();
void fcloseall();
return 0; } void yyerror() { } //output dhanu@dhanu:~$ lex pract5.l dhanu@dhanu:~$ yacc -d pract.y dhanu@dhanu:~$ cc lex.yy.c y.tab.c -ll -ly dhanu@dhanu:~$ ./a.out input.txt MOV AX, a ADD AX, b MOV t1, AX MOV AX, t1 SUB AX, c MOV t2, AX MOV AX, t2 MUL AX, d MOV t3, AX MOV AX, t3 DIV AX, e MOV t4, AX MOV AX, t4 MOV f, AX
